// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, IO, Thermometer, argv, config, emitSampleSignal, emitter, end, io, mode, query, sample, send, sensor, sensorReading, sensors, shutdown, startSampling, state, statsd, statsdClient, status, thermo, _i, _len;

  EventEmitter = require('events').EventEmitter;

  statsd = require('node-statsd').StatsD;

  argv = require('optimist').argv;

  config = require('./lib/config.js');

  Thermometer = require('./lib/thermometer.js');

  IO = require('./lib/io.js');

  thermo = new Thermometer();

  thermo.unit(config.sensorUnit);

  if (argv.sensors) {
    console.log('Querying sensor ids...');
    sensors = thermo.sensors();
    for (_i = 0, _len = sensors.length; _i < _len; _i++) {
      sensor = sensors[_i];
      console.log(sensor);
    }
    return;
  }

  if (argv.query) {
    console.log('Querying sensor id [' + argv.query + ']...');
    sensorReading = thermo.temperature(argv.query);
    console.log('Temperature: ' + sensorReading);
    return;
  }

  if (argv.control) {
    if (argv.enable) {
      mode = 'enable';
      state = true;
    } else if (argv.disable) {
      mode = 'disable';
      state = false;
    } else {
      console.log('--control <channel> requires either --enable or --disable option');
    }
    console.log('Sending ' + mode + ' signal to control channel ' + argv.control);
    end = function() {
      return process.exit();
    };
    send = function() {
      if (!state) {
        io.state(true);
      }
      return io.signal(argv.control, state, end);
    };
    io = new IO(argv.debug, 'out');
    io.setup(config, send);
    return;
  }

  if (argv.status) {
    console.log('Querying status of GPIO channel ' + argv.status + '...');
    status = function(err, value) {
      state = 'off';
      if (value) {
        state = 'on';
      }
      console.log('GPIO channel is ' + state);
      process.exit();
    };
    query = function() {
      return io.status(argv.status, status);
    };
    io = new IO(argv.debug, 'in');
    io.setup(config, query);
    return;
  }

  io = new IO(argv.debug, 'out');

  emitter = new EventEmitter();

  statsdClient = new statsd();

  shutdown = false;

  emitSampleSignal = function() {
    emitter.emit('sample');
  };

  sample = function() {
    var controlName, _j, _len1, _ref;

    _ref = config.sensors;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      sensor = _ref[_j];
      sensorReading = thermo.temperature(sensor.id);
      if (argv.debug) {
        console.log(sensor.name + '[' + sensor.id + '] : ' + sensorReading);
      }
      if (!argv.nolog) {
        statsdClient.gauge(sensor.name, sensorReading);
      }
      if (sensor.control === "none") {
        continue;
      }
      if (io.locked(sensor.gpio) === true) {
        continue;
      }
      controlName = sensor.name + '_gpio_' + sensor.gpio;
      if (sensor.control === "manual") {
        if (sensorReading > sensor.sv && io.enabled(sensor.gpio)) {
          if (argv.debug) {
            console.log('disabling io channel: ' + sensor.gpio);
          }
          io.signal(sensor.gpio, false);
          statsdClient.decrement(controlName);
        } else if (sensorReading < sensor.sv && !io.enabled(sensor.gpio)) {
          if (argv.debug) {
            console.log('enabling io channel: ' + sensor.gpio);
          }
          io.signal(sensor.gpio, true);
          statsdClient.increment(controlName);
        }
      }
    }
    if (!shutdown) {
      setTimeout(emitSampleSignal, config.pollFrequency);
    }
  };

  emitter.on('sample', sample);

  startSampling = function() {
    setTimeout(emitSampleSignal, config.pollFrequency);
  };

  io.setup(config, startSampling);

}).call(this);
