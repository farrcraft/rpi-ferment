// Generated by CoffeeScript 1.6.2
(function() {
  var UserTool, argv, bcrypt, db, mongoose, tool;

  argv = require('optimist').argv;

  mongoose = require('mongoose');

  bcrypt = require('bcrypt');

  db = require('../lib/services/db.js');

  require('../lib/orm/user.js');

  UserTool = (function() {
    function UserTool() {}

    UserTool.prototype.run = function(argv) {
      if (argv.add) {
        return this.add(argv.email, argv.password);
      } else if (argv.list) {
        return this.list();
      } else if (argv["delete"]) {
        return this["delete"](argv["delete"]);
      }
    };

    false;

    UserTool.prototype.add = function(email, password) {
      var hash, model, salt, saveCallback, user;

      db.establishConnection();
      model = mongoose.model('User');
      salt = bcrypt.genSaltSync(10);
      hash = bcrypt.hashSync(password, salt);
      user = new model();
      user.email = email;
      user.password = hash;
      user.salt = salt;
      saveCallback = function(err) {
        db.disconnect();
      };
      user.save(saveCallback);
      return true;
    };

    UserTool.prototype.list = function() {
      var findCallback, model;

      db.establishConnection();
      model = mongoose.model('User');
      findCallback = function(err, users) {
        var user, _i, _len;

        if (err) {
          db.disconnect();
          return;
        }
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          console.log(user.email);
        }
        return db.disconnect();
      };
      return model.find(findCallback);
    };

    UserTool.prototype["delete"] = function(email) {
      var deleteCallback, model;

      db.establishConnection();
      model = mongoose.model('User');
      deleteCallback = function(err) {
        db.disconnect();
      };
      return model.findOneAndRemove({
        email: email
      }, deleteCallback);
    };

    return UserTool;

  })();

  tool = new UserTool();

  tool.run(argv);

}).call(this);
