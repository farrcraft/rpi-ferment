// Generated by CoffeeScript 1.6.2
(function() {
  var Cli, IO, Thermometer, config, thermo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  config = require('./lib/config.js');

  Thermometer = require('./lib/thermometer.js');

  IO = require('./lib/io.js');

  thermo = new Thermometer();

  thermo.unit(config.sensorUnit);

  Cli = (function() {
    function Cli() {
      this.status = __bind(this.status, this);
      this.control = __bind(this.control, this);
      this.query = __bind(this.query, this);
      this.sensors = __bind(this.sensors, this);
      this.run = __bind(this.run, this);
    }

    Cli.prototype.run = function(argv) {
      if (argv.sensors) {
        return this.sensors();
      } else if (argv.query) {
        return this.query();
      } else if (argv.control) {
        return this.control();
      } else if (argv.status) {
        return this.status();
      }
      return false;
    };

    Cli.prototype.sensors = function() {
      var sensor, sensors, _i, _len;

      console.log('Querying sensor ids...');
      sensors = thermo.sensors();
      for (_i = 0, _len = sensors.length; _i < _len; _i++) {
        sensor = sensors[_i];
        console.log(sensor);
      }
      return true;
    };

    Cli.prototype.query = function() {
      var sensorReading;

      console.log('Querying sensor id [' + argv.query + ']...');
      sensorReading = thermo.temperature(argv.query);
      console.log('Temperature: ' + sensorReading);
      return true;
    };

    Cli.prototype.control = function() {
      var end, io, mode, send, state;

      if (argv.enable) {
        mode = 'enable';
        state = true;
      } else if (argv.disable) {
        mode = 'disable';
        state = false;
      } else {
        console.log('--control <channel> requires either --enable or --disable option');
      }
      console.log('Sending ' + mode + ' signal to control channel ' + argv.control);
      end = function() {
        return process.exit();
      };
      send = function() {
        if (!state) {
          io.state(true);
        }
        return io.signal(argv.control, state, end);
      };
      io = new IO(argv.debug, 'out');
      io.setup(config, send);
      return true;
    };

    Cli.prototype.status = function() {
      var io, query, status;

      console.log('Querying status of GPIO channel ' + argv.status + '...');
      status = function(err, value) {
        var state;

        state = 'off';
        if (value) {
          state = 'on';
        }
        console.log('GPIO channel is ' + state);
        process.exit();
      };
      query = function() {
        return io.status(argv.status, status);
      };
      io = new IO(argv.debug, 'in');
      io.setup(config, query);
      return true;
    };

    return Cli;

  })();

  module.exports = Cli;

}).call(this);
