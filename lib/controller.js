// Generated by CoffeeScript 1.6.2
(function() {
  var Controller, IO, Sampler, Sockets, statsd,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  statsd = require('node-statsd').StatsD;

  Sampler = require('./sampler.js');

  IO = require('./io.js');

  Sockets = require('./sockets.js');

  Controller = (function() {
    Controller.prototype.config_ = {};

    Controller.prototype.state_ = {};

    Controller.prototype.io_ = null;

    Controller.prototype.debug_ = false;

    Controller.prototype.statsd_ = null;

    Controller.prototype.sampler_ = null;

    Controller.prototype.sockets_ = null;

    function Controller(config, debug, nolog) {
      this.processSample = __bind(this.processSample, this);
      this.getMode = __bind(this.getMode, this);
      this.setMode = __bind(this.setMode, this);
      this.getSv = __bind(this.getSv, this);
      this.setSv = __bind(this.setSv, this);
      this.setGpio = __bind(this.setGpio, this);
      this.getGpio = __bind(this.getGpio, this);
      this.config = __bind(this.config, this);
      this.debug = __bind(this.debug, this);
      this.run = __bind(this.run, this);
      var sensor, statsd_, _i, _len, _ref;

      this.debug_ = debug;
      this.config_ = config;
      if (!nolog) {
        statsd_ = new statsd();
      }
      _ref = config.sensors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sensor = _ref[_i];
        this.state_[sensor.name] = {
          sv: 0,
          pv: 0,
          gpio: false,
          mode: 'manual'
        };
        if (sensor.type !== 'ambient') {
          this.state_[sensor.name].channel = sensor.gpio;
        }
      }
      this.io_ = new IO(this.debug_, 'out');
      this.sockets_ = new Sockets(this);
      this.sampler_ = new Sampler(this.config_.pollFrequency, this.config_.sensors, this.config_.sensorUnit, this);
      return;
    }

    Controller.prototype.run = function() {
      return this.io_.setup(this.config_, this.sampler_.startSampling);
    };

    Controller.prototype.debug = function() {
      return this.debug_;
    };

    Controller.prototype.config = function() {
      return this.config_;
    };

    Controller.prototype.getGpio = function(sensor) {
      return this.state_[sensor].gpio;
    };

    Controller.prototype.setGpio = function(sensor, value) {
      var controlName, controlSignalCompletion;

      this.state_[sensor].gpio = value;
      controlSignalCompletion = function() {
        if (this.debug_) {
          console.log('GPIO channel state updated');
        }
      };
      controlName = sensor + '_gpio_' + this.state_[sensor].channel;
      this.io_.signal(this.state_[sensor].channel, value, controlSignalCompletion);
      if (!this.statsd_) {
        return;
      }
      if (!value) {
        this.statsd_.decrement(controlName);
      } else {
        this.statsd_.increment(controlName);
      }
    };

    Controller.prototype.setSv = function(sensor, value) {
      this.state_[sensor].sv = value;
    };

    Controller.prototype.getSv = function(sensor) {
      return this.state_[sensor].sv;
    };

    Controller.prototype.setMode = function(sensor, mode) {
      this.state_[sensor].mode = mode;
    };

    Controller.prototype.getMode = function(sensor) {
      return this.state_[sensor].mode;
    };

    Controller.prototype.processSample = function(sensor, value) {
      this.state_[sensor].pv = value;
      if (this.debug_) {
        console.log('Processing sample value [' + value + '] for sensor [' + sensor + ']');
      }
      if (this.statsd_) {
        this.statsd_.gauge(sensor, value);
      }
      if (this.state_[sensor].gpio == null) {
        return;
      }
      if (this.state_[sensor].mode === 'manual') {
        if (value > this.state_[sensor].sv && this.state_[sensor].gpio) {
          if (this.debug_) {
            console.log('Disabling gpio channel: ' + this.state_[sensor].gpio);
          }
          this.setGpio(sensor, false);
        } else if (value < this.state_[sensor].sv && !this.state_[sensor].gpio) {
          if (this.debug_) {
            console.log('Enabling gpio channel: ' + this.state_[sensor].gpio);
          }
          this.setGpio(sensor, true);
        }
      }
    };

    return Controller;

  })();

  module.exports = Controller;

}).call(this);
