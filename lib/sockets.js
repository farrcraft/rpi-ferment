// Generated by CoffeeScript 1.6.2
(function() {
  var Sockets, http, socketio,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  socketio = require('socket.io');

  Sockets = (function() {
    Sockets.prototype.controller_ = null;

    function Sockets(controller) {
      this.run = __bind(this.run, this);      this.controller_ = controller;
    }

    Sockets.prototype.httpHandler = function(req, res) {
      res.writeHead(200);
      res.end('');
    };

    Sockets.prototype.run = function() {
      var app;

      app = http.createServer(this.httpHandler);
      socketio.listen(app);
      socketio.sockets.on('connection', this.connectionHandler);
    };

    Sockets.prototype.connectionHandler = function(socket) {
      /*
      		  socket.emit('news', { hello: 'world' });
      		  socket.on('my other event', function (data) {
      		    console.log(data);
      		  });
      */
      socket.on('config', function() {
        socket.emit(this.controller_.config());
      });
      socket.on('getgpio', function(channel) {
        var state;

        state = this.controller_.getGpio(channel);
        socket.emit(state);
      });
      socket.on('setgpio', function(channel, state) {
        this.controller_.setGpio(channel, state);
      });
      socket.on('setsv', function(sensor, sv) {
        this.controller_.setSv(sensor, sv);
      });
      socket.on('getsv', function(sensor) {
        var sv;

        sv = this.controller_.getSv(sensor);
        socket.emit(sv);
      });
      socket.on('getpv', function(sensor) {
        var pv;

        pv = this.controller_.getPv(sensor);
        socket.emit(pv);
      });
      socket.on('getmode', function(sensor) {
        var mode;

        mode = this.controller_.getMode(sensor);
        socket.emit(mode);
      });
      socket.on('setmode', function(sensor, mode) {
        return this.controller_.setMode(sensor, mode);
      });
    };

    return Sockets;

  })();

  module.exports = Sockets;

}).call(this);
