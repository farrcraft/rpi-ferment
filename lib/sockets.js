// Generated by CoffeeScript 1.6.2
(function() {
  var Sockets, http, socketio,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  socketio = require('socket.io');

  Sockets = (function() {
    Sockets.prototype.controller_ = null;

    function Sockets(controller) {
      this.connectionHandler = __bind(this.connectionHandler, this);
      this.run = __bind(this.run, this);      this.controller_ = controller;
    }

    Sockets.prototype.httpHandler = function(req, res) {
      res.writeHead(200);
      res.end('');
    };

    Sockets.prototype.run = function() {
      var app, config, io;

      config = this.controller_.config();
      if (this.controller_.debug()) {
        console.log('Listening for socket connections on port [' + config.ioPort + '] ...');
      }
      app = http.createServer(this.httpHandler);
      io = socketio.listen(app);
      app.listen(config.ioPort);
      io.sockets.on('connection', this.connectionHandler);
    };

    Sockets.prototype.connectionHandler = function(socket) {
      var _this = this;

      socket.on('config', function() {
        if (_this.controller_.debug()) {
          console.log('Socket requested config');
        }
        socket.emit('config', _this.controller_.config());
      });
      socket.on('getgpio', function(channel) {
        var state;

        state = _this.controller_.getGpio(channel);
        socket.emit('gpio', state);
      });
      socket.on('setgpio', function(channel, state) {
        if (_this.controller_.debug()) {
          console.log('Socket requested GPIO channel [' + channel + '] set to state [' + state + ']');
        }
        _this.controller_.setGpio(channel, state);
      });
      socket.on('setsv', function(sensor, sv) {
        if (_this.controller_.debug()) {
          console.log('Socket requested sensor [' + sensor + '] SV set to [' + sv + ']');
        }
        _this.controller_.setSv(sensor, sv);
      });
      socket.on('getsv', function(sensor) {
        var sv;

        sv = _this.controller_.getSv(sensor);
        socket.emit('sv', sv);
      });
      socket.on('getpv', function(sensor) {
        var pv;

        pv = _this.controller_.getPv(sensor);
        socket.emit('pv', pv);
      });
      socket.on('getmode', function(sensor) {
        var mode;

        mode = _this.controller_.getMode(sensor);
        socket.emit('mode', mode);
      });
      socket.on('setmode', function(sensor, mode) {
        if (_this.controller_.debug()) {
          console.log('Socket requested sensor [' + sensor('] set to mode [' + mode + ']'));
        }
        return _this.controller_.setMode(sensor, mode);
      });
    };

    return Sockets;

  })();

  module.exports = Sockets;

}).call(this);
